// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Service {
  id              String           @id @default(cuid())
  name            String
  description     String?
  status          ServiceStatus    @default(OPERATIONAL)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  organizationId  String
  incidents       Incident[]       // Relation to incidents
  maintenances    Maintenance[]    // Relation to scheduled maintenances
}

enum ServiceStatus {
  OPERATIONAL
  DEGRADED_PERFORMANCE
  PARTIAL_OUTAGE
  MAJOR_OUTAGE
}

model Incident {
  id              String           @id @default(cuid())
  title           String
  description     String
  status          IncidentStatus   @default(INVESTIGATING)
  impact          IncidentImpact   @default(MINOR)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  resolvedAt      DateTime?
  organizationId  String
  serviceId       String
  service         Service          @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  updates         IncidentUpdate[]
}

enum IncidentStatus {
  INVESTIGATING
  IDENTIFIED
  MONITORING
  RESOLVED
}

enum IncidentImpact {
  MINOR
  MAJOR
  CRITICAL
}

model IncidentUpdate {
  id              String           @id @default(cuid())
  message         String
  status          IncidentStatus
  createdAt       DateTime         @default(now())
  incidentId      String
  incident        Incident         @relation(fields: [incidentId], references: [id], onDelete: Cascade)
}

model Maintenance {
  id              String            @id @default(cuid())
  title           String
  description     String
  status          MaintenanceStatus @default(SCHEDULED)
  startTime       DateTime
  endTime         DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  organizationId  String
  serviceId       String
  service         Service           @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  updates         MaintenanceUpdate[]
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
}

model MaintenanceUpdate {
  id              String           @id @default(cuid())
  message         String
  status          MaintenanceStatus
  createdAt       DateTime         @default(now())
  maintenanceId   String
  maintenance     Maintenance      @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
}